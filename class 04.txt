TCP == 데이터의 흐름 형태, 몇 단위로 나눠 읽을지는 client 조건에 맞춰 진행
UDP == 데이터 블록 형태, 서버가 보낸 숫자를 바탕으로 client가 읽는 과정을 진행



주소체계와 데이터
소켓 생성 -> bind -> ... 과정에서 주소를 할당하는데 이 주소를 알아야 함


인터넷 주소

클래스
A~D
4바이트 기준으로, A는 1 D는 4 바이트를 주소로 활용하며,
A쪽이 큰 규모의 네트워크 == 0~127이하 범위를 주소
B == 128이상 ~ 191 이하...

PORT번호
IP는 컴퓨터를 구분하는 용도로 사용, PORT 번호는 소켓을 구분하는 용도
둘 이상의 PORT가 하나의 프로그램에 할당 될 수 있다.

PORT번호는 16비트로 표현 0~65535 이하
0~1023은 Well-known PORT로 이미 용도가 정해진 포트임으로 사용해서는 안된다


IPv4 기반 주소표현을 위한 구조체

sockaddr_in

sa_family_t sin_family; == 주소체계 정보 AF_INET / AF_INET6
uint16_t sin_port; == port 번호
struct in_addr sin_addr; == 32비트 ip주소 -> 32비트 IPv4 인터넷 주소 포함
char sin_zero[8]; 비사용


sockaddr_in 과 sockaddr
sockaddr 의 경우는 다양한 주소체계 정보를 담을 수 있도록 정의되었음.
sockaddr_in 는 IPv4의 활용성을 높이기 위해 정의되어 활용된 구조체



빅엔디안 / 상위바이트 값을 작은 번지 수에 저장
리틀 엔디안 / 반대

네트워크 바이트 순서
네트워크의 경우는 빅엔디안으로 통일됨



바이트의 순서 변환
htons ntons / htonl ntonl

h == host / n == network
s == short / l == long 

송수신 간에 리틀엔디안, 빅엔디안에 의한 문제를 막기위해 순서에 맞도록 순서를 변환하는 함수들



문자열 정보를 네트워크 바이트 순서의 정수로 변환

inet_addr
10진수로 표현된 주소 문자열을 ip 주소정보 32비트 정수형인 in_addr_t 로 변환 + 주소 문자열 확인

inet_aton
위와 유사한 기능, 반환 형이 구조체 in_addr로 반환함, 이 구조체가 in_addr_t 를 포함함으로 비슷함
그러나 지원하지 않는 라이브러리가 존재할 수 있음

inet_ntoa
반대로 32비트 정수형 주소 정보를, 아스키 값으로 변환



주소 초기화 과정
sockaddr_in 구조체를 생성
문자열로 받은 ip와 포트 번호를 inet_addr로 32비트 변환
구조체에 해당 정보를 할당시킴


INADDR_ANY
해당 PC에 할당된 된 4바이트 unsigned int 형, 정렬만 해주면 바로 사용가능하기 때문에 유용
단, 네트워크 카드가 2개 이상이라면 IP가 복수 일 수 있음으로 대상 IP를 지칭하는 위 방법으로 처리해야 함



bind (int sockfd, struct sockaddr* myaddr, socklen);
주소 정보의 할당을 위한 함수
해당 소켓, 주소 구조체의 주소, 크기

