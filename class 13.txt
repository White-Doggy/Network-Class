멀티프로세스 기반 서버 구현


멀티프로세스 기반 서버
다수의 프로세스를 생성하는 방식으로 서비스 제공

멀티 쓰레딩 기반 서버
클라이언트 수 만큼 쓰레드를 생성하는 방식으로 서비스 제공


차이
쓰레드는 프로세스의 흐름의 단위라 할수 있다. 
쓰레드는 텍스트와 heap 영역은 부모 프로세스와 공유하지만, stack의 내용은 공유하지 않음 == 개별 함수들의 실행흐름이 다르기 때문
( 경량화된 프로세스라고 지칭)

반면 프로세스는 모든 자원을 별도로 활용하게 됨



fork 함수
호출한 프로세스가 복사되어 fork 함수 호출 이후 각각의 프로세스가 독립적으로 실행 됨



좀비프로세스
실행 완료 이후에도 소멸되지 않은 프로세스
main이 반환되면 소멸되어야 함.


원인
자식 프로세스가 종료되면서 반환하는 상태 값이 부모 프로세스에 전달되지 않으면
해당 프로세스는 소멸되지 않고 좀비 프로세스가 됨


소멸 방법 1
wait 함수 활용 == 자식함수가 종료되지 않은 경우, blocking 함

소멸 방법 2
waitpid == 자식 프로세스의 id를 지정해 종료될때까지 대기 & 옵션에 따라 blocking 여부를 결정할 수 있어서
일반 wait과 달리 blocking 상태에 빠지지 않음



시그널, 시그널 등록

시그널
특정 상황이 되었을 때 운영체제가 프로세스에게 해당 상황이 발생함을 알리는 일종의 메시지

시그널 등록
특정 상황에서 운영체제로부터 프로세스가 시그널을 받기위해 해당 상황에 대해서 등록과정을 거침


sigaction 함수
sigaction 구조체를 등록하고 지정된 시그널들을 핸들링 동안 blocking 시킴



시그널 핸들링을 통한 좀비 프로세스 소멸
SIGCHID에 대해 시그널 핸들링을 등록하고,
이때 등록된 함수내에서 좀비 소멸을 막으면 좀비 프로세스는 생서되지 않음




프로세스 기반 다중접속 서버 모델
기존의 accept 를 한뒤 하나의 클라이언트와만 데이터 통신을 진행하던 서버 구조에서

다른 자식 프로세스를 생성해 생성된 자식 프로세스가 데이터 통신을 처리
부모 프로세스는 계속해서 accept를 받아 처리가 가능해짐

1 에코 서버(부모 프로세스) accept 함수 호출로 연결 요청 수락
2 이때 얻게 되는 소켓의 파일 디스크립터를 자식 프로세스를 생성해서 넘겨준다.
3 자식 프로세스는 전달받은 파일 디스크립터를 바탕으로 서비스 제공

fork를 통해 자식 프로세스를 생성하며,
이때 파일 디스크립터는 부모의 것을 복사해 가져오기 때문에
부모와 자식 프로세스는 각각 필요유무에 따라 소켓을 닫음
( 파일 자체가 복사되는 것이 아니라 파일 디스크립터가 복사되는 것 == 같은 소켓을 같이 활용하는 개념 )



입출력 루틴 분할
역할에 따라 프로세스를 각각 생성해 입력 출력을 별도로 진행
보내고, 받는 구조가 아닌 동시에 진행 가능하도록 함

